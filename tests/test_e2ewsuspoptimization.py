import time

import pytest
from selenium.webdriver import ActionChains
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait

from TestData.workspacedata import workspacedata
from pageObjects.AssetPage import AssetPage
from pageObjects.DiPage import DiPage
from pageObjects.UspPage import UspPage
from pageObjects.UcPage import UcPage
from pageObjects.WorkSpacePage import WorkSpacePage

from utilities.BaseClass import BaseClass


class TestWorkspaceAssetSuite(BaseClass):

    def test_USP_Landing_Page_Grid_Validations(self,getData):
        log = self.getLogger()
        workSpacePage = WorkSpacePage(self.driver)
        uspPage = UspPage(self.driver)
        self.login(getData["UserName"], getData["Password"])
        log.info("Login successfully")
        self.WorkspceFilter("Data")
        log.info("Workspace Landing page is displayed")
        uspPage.GetWsUspLandingPage().click()
        time.sleep(1)
        assert("Digital Twin - USP" in uspPage.GetUspLandingPageTitle().text)
        log.info("USP landing page is displayed")
        assert ("Name" in uspPage.GetUspListGridName().text)
        assert ("Description" in uspPage.GetUspListGridDesc().text)
        assert ("No of Reactors" in uspPage.GetUspListGridNumReactor().text)
        assert ("Status" in uspPage.GetUspListGridStatus().text)
        assert ("Actions" in uspPage.GetUspListGridAction().text)
    def test_UseCase_Landing_Page_Grid_Validation(self, getData):
        log = self.getLogger()
        workSpacePage = WorkSpacePage(self.driver)
        uspPage = UspPage(self.driver)
        ucPage = UcPage(self.driver)
        self.WorkspceFilter("Data")
        log.info("Workspace Landing page is displayed")
        uspPage.GetWsUspLandingPage().click()
        time.sleep(1)
        assert ("Digital Twin - USP" in uspPage.GetUspLandingPageTitle().text)
        log.info("USP landing page is displayed")
        self.UspFilter(getData["UspName"])
        log.info("Use Cases Landing page is displayed")
        assert(getData["UspName"]  in uspPage.GetUseCaseListPageTitle().text)
        assert("Name" in uspPage.GetUseCaseGridName().text)
        assert ("Description" in uspPage.GetUseCaseGridDesc().text)
        assert ("Prediction Usecase" in uspPage.GetUseCaseGridPrediction().text)
        assert ("Status" in uspPage.GetUseCaseGridStatus().text)
        assert ("Set-up" in uspPage.GetUseCaseGridType().text)
    # def test_Create_UseCase_Optimization_Landing_Page_Grid_Validation(self, getData):
    #     log = self.getLogger()
    #     workSpacePage = WorkSpacePage(self.driver)
    #     uspPage = UspPage(self.driver)
    #     ucPage = UcPage(self.driver)
    #     self.WorkspceFilter("Data")
    #     log.info("Workspace Landing page is displayed")
    #     uspPage.GetWsUspLandingPage().click()
    #     time.sleep(1)
    #     assert ("Digital Twin - USP" in uspPage.GetUspLandingPageTitle().text)
    #     log.info("USP landing page is displayed")
    #     self.UspFilter(getData["UspName"])
    #     log.info("Use Cases Landing page is displayed")
    #     assert(getData["UspName"] in uspPage.GetUseCaseListPageTitle().text)
    #     uspPage.GetUseCaseAddBtn().click()
    #     time.sleep(1)
    #     uspPage.GetUseCaseAddName().send_keys(getData["OptUseCaseName"])
    #     uspPage.GetUseCaseAddDesc().send_keys("Automation Testing Simulation")
    #     uspPage.GetUseCaseGridPredictionType().click()
    #     uspPage.GetUseCaseGridPredictionTypeOptimization().click()
    #     # uspPage.GetUseCaseSetpDropDown().click()
    #     # uspPage.GetUseCaseSetupReactor().click()
    #
    #
    #     uspPage.GetUseCaseCreateBtn().click()
    #     time.sleep(2)
    #     assert(getData["OptUseCaseName"] in ucPage.GetOptimizationPageTitle().text)
    #     assert ("Group Name" in ucPage.GetOptUcReactorName().text)
    #     assert ("Reactor Type" in ucPage.GetOptUcReactorType().text)
    #     assert ("Reactor Vessel Name" in ucPage.GetOptUcReactors().text)
    #     assert ("Select Reactor" in ucPage.GetOptUcStepperStage1().text)
    #     time.sleep(2)
    def test_UseCase_Optimization_Objective_Function(self, getData):
        log = self.getLogger()
        workSpacePage = WorkSpacePage(self.driver)
        uspPage = UspPage(self.driver)
        ucPage = UcPage(self.driver)
        self.WorkspceFilter("Data")
        log.info("Workspace Landing page is displayed")
        uspPage.GetWsUspLandingPage().click()
        time.sleep(1)
        assert ("Digital Twin - USP" in uspPage.GetUspLandingPageTitle().text)
        log.info("USP landing page is displayed")
        self.UspFilter(getData["UspName"])
        log.info("Use Cases Landing page is displayed")
        assert(getData["UspName"] in uspPage.GetUseCaseListPageTitle().text)
        uspPage.GetUseCaseListNameFilter().click()
        uspPage.GetFilterSearBox().send_keys(getData["OptUseCaseName"])
        uspPage.GetFilterApplyBtn().click()

        action = ActionChains(self.driver)
        action.move_to_element(uspPage.GetSelectUC()).click().perform()
        time.sleep(2)
        ucPage.GetOptUcNextBtn().click()
        time.sleep(2)
        ucPage.GetOptPerformObectiveNextBtn().click()
        time.sleep(1)
        assert("Objective Function" in ucPage.GetOptUcStepperStage2().text)
        # assert("Aggregation" in ucPage.GetOptAggregation().text)
        # ucPage.GetOptAggregateMethodDropdown().click()
        # time.sleep(1)
        # ucPage.GetOptAggregateMethodSum().click()
        # time.sleep(1)
        # ucPage.GetOptAggregationPrevBtn().click()
        # time.sleep(1)
        assert("Performance Objective" in ucPage.GetOptPeformObective().text)
        assert("Component" in ucPage.GetOptPOveGridComponent().text)
        assert ("Weight" in ucPage.GetOptPOveGridWeight().text)
        assert ("Attribute" in ucPage.GetOptPOveGridAttribute().text)
        assert ("Variable" in ucPage.GetOptPOveGridVariable().text)
        assert ("All / Time" in ucPage.GetOptPOveGridalltime().text)
        assert ("Value" in ucPage.GetOptPOveGridValue().text)
        time.sleep(1)
        # ucPage.GetOptPerformObectiveNextBtn().click()
        # time.sleep(1)
        ucPage.GetOptPONextBtn().click()
        time.sleep(1)
        assert("USP_group_workshop" in ucPage.GetOptDesignSpaceRGroup().text)
        time.sleep(2)
    def test_UseCase_Optimization_Constraints_Design_Space(self, getData):
        log = self.getLogger()
        workSpacePage = WorkSpacePage(self.driver)
        uspPage = UspPage(self.driver)
        ucPage = UcPage(self.driver)
        self.WorkspceFilter("Data")
        log.info("Workspace Landing page is displayed")
        uspPage.GetWsUspLandingPage().click()
        time.sleep(1)
        assert ("Digital Twin - USP" in uspPage.GetUspLandingPageTitle().text)
        log.info("USP landing page is displayed")
        self.UspFilter(getData["UspName"])
        log.info("Use Cases Landing page is displayed")
        assert(getData["UspName"] in uspPage.GetUseCaseListPageTitle().text)
        uspPage.GetUseCaseListNameFilter().click()
        uspPage.GetFilterSearBox().send_keys(getData["OptUseCaseName"])
        uspPage.GetFilterApplyBtn().click()

        action = ActionChains(self.driver)
        action.move_to_element(uspPage.GetSelectUC()).click().perform()
        time.sleep(2)
        ucPage.GetOptUcNextBtn().click()
        time.sleep(2)
        ucPage.GetOptPerformObectiveNextBtn().click()
        time.sleep(1)
        assert("Objective Function" in ucPage.GetOptUcStepperStage2().text)
        assert("Aggregation" in ucPage.GetOptAggregation().text)
        ucPage.GetOptAggregateMethodDropdown().click()
        time.sleep(1)
        ucPage.GetOptAggregateMethodSum().click()
        time.sleep(1)
        ucPage.GetOptPONextBtn().click()
        time.sleep(1)
        assert("USP_group_workshop" in ucPage.GetOptDesignSpaceRGroup().text)
        time.sleep(2)
        assert("cultivation1" in ucPage.GetOptDesignSpaceRVessel().text)
        time.sleep(7)
        ucPage.GetOptDesignSpaceReactorConstraints().click()
        time.sleep(5)
        assert ("Osmolality (mOsm/kg)" in ucPage.GetOptConstraintsOsmolality().text)
        ucPage.GetOptConstraintsOsmolality().click()
        time.sleep(1)
        assert("Lower Limit" in ucPage.GetOptOsmolalityGridLLimit().text)
        assert ("Upper Limit" in ucPage.GetOptOsmolalityGridHLimit().text)
        time.sleep(1)
        ucPage.GetoptOsmolalityPrevBtn().click()
        time.sleep(1)
        assert ("Reactor Volume (L)" in ucPage.GetOptConstraintsReactorVolume().text)
        assert ("Lower Limit" in ucPage.GetOptReactorVolumeGridLLimit().text)
        assert ("Upper Limit" in ucPage.GetOptReactorVolumeGridHLimit().text)
        ucPage.GetoptReactorVolumeNextBtn().click()
        time.sleep(1)
        ucPage.GetoptOsmolalityNextBtn().click()
        time.sleep(1)
        assert ("Product Quality Attributes (%)" in ucPage.GetOptConstraintsPQA().text)
        assert ("Attribute Name" in ucPage.GetOptPQAGridAttributeName().text)
        assert ("Lower limit ref" in ucPage.GetOptPQAGridLlimitRef().text)
        assert ("Lower limit for Optimization" in ucPage.GetOptPQAGridLlimitOpt().text)
        assert ("Upper limit ref" in ucPage.GetOptPQAGridHlimitRef().text)
        assert ("Upper limit for Optimization" in ucPage.GetOptPQAGridHlimitOpt().text)
        ucPage.GetoptPQANextBtn().click()
        time.sleep(1)
        assert ("Concentration of Extracellular Metabolites (mmol/L)" in ucPage.GetOptConstraintsConMetabolite().text)
        assert("Extracellular metabolite name" in ucPage.GetOptConMetaboliteGridMetaboliteName().text)
        assert ("Lower limit" in ucPage.GetOptConMetaboliteGridLlimit().text)
        assert ("Upper limit" in ucPage.GetOptConMetaboliteGridHlimit().text)
    def test_UseCase_Optimization_Reactor_COntrol_Variable_Design_Space(self, getData):
        log = self.getLogger()
        workSpacePage = WorkSpacePage(self.driver)
        uspPage = UspPage(self.driver)
        ucPage = UcPage(self.driver)
        self.WorkspceFilter("Data")
        log.info("Workspace Landing page is displayed")
        uspPage.GetWsUspLandingPage().click()
        time.sleep(1)
        assert ("Digital Twin - USP" in uspPage.GetUspLandingPageTitle().text)
        log.info("USP landing page is displayed")
        self.UspFilter(getData["UspName"])
        log.info("Use Cases Landing page is displayed")
        assert(getData["UspName"] in uspPage.GetUseCaseListPageTitle().text)
        uspPage.GetUseCaseListNameFilter().click()
        uspPage.GetFilterSearBox().send_keys(getData["OptUseCaseName"])
        uspPage.GetFilterApplyBtn().click()

        action = ActionChains(self.driver)
        action.move_to_element(uspPage.GetSelectUC()).click().perform()
        time.sleep(2)
        ucPage.GetOptUcNextBtn().click()
        time.sleep(2)
        ucPage.GetOptPerformObectiveNextBtn().click()
        time.sleep(1)
        assert ("Objective Function" in ucPage.GetOptUcStepperStage2().text)
        assert ("Aggregation" in ucPage.GetOptAggregation().text)
        ucPage.GetOptAggregateMethodDropdown().click()
        time.sleep(1)
        ucPage.GetOptAggregateMethodSum().click()
        time.sleep(1)
        ucPage.GetOptPONextBtn().click()
        time.sleep(1)
        assert("USP_group_workshop" in ucPage.GetOptDesignSpaceRGroup().text)
        time.sleep(2)
        assert("cultivation1" in ucPage.GetOptDesignSpaceRVessel().text)
        time.sleep(8)
        assert ("Agitation" in ucPage.GetOptDesignSpaceRVAgitation().text)
        time.sleep(1)
        ucPage.GetOptDesignSpaceRVAgitation().click()
        time.sleep(1)
        assert ("Impeller" in ucPage.GetOptRvGridAgitationImpeller().text)
        assert ("Controller" in ucPage.GetOptRvGridAgitationController().text)
        assert ("Modify" in ucPage.GetOptRvGridAgitationModify().text)
        ucPage.GetoptRVAgitationNextBtn().click()
        time.sleep(2)
        assert("Influxes" in ucPage.GetOptDesignSpaceRVInflux().text)
        assert ("Inlet Name" in ucPage.GetOptRvGridInfluxInletName().text)
        assert ("Influx Type" in ucPage.GetOptRvGridInfluxtype().text)
        assert ("Notes" in ucPage.GetOptRvGridInfluxNotes().text)

        ucPage.GetoptRVInfluxNextBtn().click()
        time.sleep(2)
        assert("Outfluxes" in ucPage.GetOptDesignSpaceRVOutflux().text)
        assert ("Outlet Name" in ucPage.GetOptRvGridOutfluxOutletName().text)
        assert ("Outflux Type" in ucPage.GetOptRvGridOutfluxtype().text)
        assert ("Notes" in ucPage.GetOptRvGridOutfluxNotes().text)

        ucPage.GetoptRVOutfluxNextBtn().click()
        time.sleep(2)
        assert ("General Controllers" in ucPage.GetOptDesignSpaceGenController().text)
        assert ("Controller" in ucPage.GetOptRvGridGenController().text)
        assert ("Modify" in ucPage.GetOptRvGridGenControllerModify().text)
        assert ("Controller(Optimization)" in ucPage.GetOptRvGridGenControllerOpt().text)

        ucPage.GetoptRVGenControllerNextBtn().click()
        time.sleep(6)
        ucPage.GetOptSaveConfigBtn().click()
        time.sleep(1)
        assert ("Successfully saved configurations" in ucPage.GetEditUseCaseToast1().text)
        time.sleep(4)
        ucPage.GetOptDesignSpaceNextBtn().click()
        time.sleep(2)
    def test_UseCase_Optimization_Summary_Page(self, getData):
        log = self.getLogger()
        workSpacePage = WorkSpacePage(self.driver)
        uspPage = UspPage(self.driver)
        ucPage = UcPage(self.driver)
        self.WorkspceFilter("Data")
        log.info("Workspace Landing page is displayed")
        uspPage.GetWsUspLandingPage().click()
        time.sleep(1)
        assert ("Digital Twin - USP" in uspPage.GetUspLandingPageTitle().text)
        log.info("USP landing page is displayed")
        self.UspFilter(getData["UspName"])
        log.info("Use Cases Landing page is displayed")
        assert(getData["UspName"] in uspPage.GetUseCaseListPageTitle().text)
        uspPage.GetUseCaseListNameFilter().click()
        uspPage.GetFilterSearBox().send_keys(getData["OptUseCaseName"])
        uspPage.GetFilterApplyBtn().click()

        action = ActionChains(self.driver)
        action.move_to_element(uspPage.GetSelectUC()).click().perform()
        time.sleep(2)
        ucPage.GetOptUcNextBtn().click()
        time.sleep(2)
        ucPage.GetOptPerformObectiveNextBtn().click()
        time.sleep(1)
        assert ("Objective Function" in ucPage.GetOptUcStepperStage2().text)
        assert ("Aggregation" in ucPage.GetOptAggregation().text)
        ucPage.GetOptAggregateMethodDropdown().click()
        time.sleep(1)
        ucPage.GetOptAggregateMethodSum().click()
        time.sleep(1)
        ucPage.GetOptPONextBtn().click()
        time.sleep(1)
        assert("USP_group_workshop" in ucPage.GetOptDesignSpaceRGroup().text)
        time.sleep(2)
        assert("cultivation1" in ucPage.GetOptDesignSpaceRVessel().text)
        time.sleep(7)
        ucPage.GetOptSummaryNextBtn().click()
        time.sleep(2)
        assert ("Execute" in ucPage.GetOptUcStepperStage4().text)
        time.sleep(1)
        assert ("Bioprocess Specification Name" in ucPage.GetOptSummaryBioProceessName().text)
        assert ("Group" in ucPage.GetOptSummaryGroup().text)
        assert ("Status" in ucPage.GetOptSummaryStatus().text)
        assert ("Optimization Ready" in ucPage.GetOptSummaryGetStatus().text)
        time.sleep(1)
        ucPage.GetRunOptBtn().click()
        time.sleep(1)
        assert ("optimization started" in ucPage.GetEditUseCaseToast1().text)









    # def test_Run_Simulation_Report_Validation(self, getData):
    #     log = self.getLogger()
    #     workSpacePage = WorkSpacePage(self.driver)
    #     uspPage = UspPage(self.driver)
    #     self.WorkspceFilter("Data")
    #     log.info("Workspace Landing page is displayed")
    #     uspPage.GetWsUspLandingPage().click()
    #     time.sleep(1)
    #     assert ("Digital Twin - USP" in uspPage.GetUspLandingPageTitle().text)
    #     log.info("USP landing page is displayed")
    #     self.UspFilter(getData["UspName"])
    #     log.info("Use Cases Landing page is displayed")
    #     assert("AutomationUsp1" in uspPage.GetUseCaseListPageTitle().text)
    #     uspPage.GetUseCaseListNameFilter().click()
    #     uspPage.GetFilterSearBox().send_keys(getData["UseCaseName"])
    #     uspPage.GetFilterApplyBtn().click()
    #
    #     action = ActionChains(self.driver)
    #     action.move_to_element(uspPage.GetSelectUC()).click().perform()
    #     time.sleep(1)
    #     assert (getData["UseCaseName"] in uspPage.GetUseCaseReactorList().text)
    #     uspPage.GetRunSimulationBtn().click()
    #     time.sleep(15)
    #     element = WebDriverWait(self.driver, 30).until(
    #     EC.element_to_be_clickable((uspPage.GetRunSimulationMsgBtn())))
    #     time.sleep(5)
    #     element.click()
    #     assert("Messages" in uspPage.GetMsgBarTitle().text)
    #     assert ("Run Simulation Started" in uspPage.GetMsgContentP1().text)
    #     assert ("Run Simulation Completed" in uspPage.GetMsgContentP2().text)
    #     uspPage.GetMsgBarCloseBtn().click()
    #     time.sleep(1)
    #     uspPage.GetRunSimulationReportsBtn().click()
    #     time.sleep(2)
    #     assert("Reports" in uspPage.GetReportPageTitle().text)
    #     assert("Biomass" in uspPage.GetBioMassPlotTitile().text)
    #     assert("Product", uspPage.GetProductPlotTitile().text)







    @pytest.fixture(params=workspacedata.getTestData("test_workspace_title_check"))
    def getData(self, request):
        return request.param